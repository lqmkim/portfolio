---
export const prerender = true;

import ShipsLayout from "@layouts/ships-layout.astro";
import { ScrollProgress } from "@components/misc";
import { getReadingTime } from "@utils/index";
import { fetchShipBySlug, fetchShips } from "@utils/sanity";
import EndCTA from "@components/cta/end-cta.astro";
import { portableTextToHtml } from "@utils/portableTextToHtml";

interface Ship {
  slug: string;
  title: string;
  description: string;
  category: string;
  pubDate: string;
}

export const getStaticPaths = async () => {
  const ships = await fetchShips();
  return ships.map((ship: Ship) => ({
    params: { slug: ship.slug },
  }));
};

const { slug } = Astro.params;
const ship = await fetchShipBySlug(slug as string);

if (!ship) return Astro.redirect("/404");

const readingTime = getReadingTime(ship.description);
const blocks = ship.content ?? [];
---

<ShipsLayout {...ship} readingTime={readingTime}>
  {
    blocks.map((block: any, i: number) => {
      if (block._type === "endCTA") return <EndCTA {...block} />;
      return <div set:html={portableTextToHtml([block])} />;
    })
  }
  <ScrollProgress />
</ShipsLayout>
